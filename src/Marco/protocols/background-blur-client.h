/* Generated by wayland-scanner 1.23.0 */

#ifndef BACKGROUND_BLUR_CLIENT_PROTOCOL_H
#define BACKGROUND_BLUR_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_background_blur The background_blur protocol
 * @section page_ifaces_background_blur Interfaces
 * - @subpage page_iface_background_blur_manager - background blur manager
 * - @subpage page_iface_background_blur - background blur object
 * @section page_copyright_background_blur Copyright
 * <pre>
 *
 * Copyright Â© 2025 Cuarzo Software
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct background_blur;
struct background_blur_manager;
struct wl_region;
struct wl_surface;

#ifndef BACKGROUND_BLUR_MANAGER_INTERFACE
#define BACKGROUND_BLUR_MANAGER_INTERFACE
/**
 * @page page_iface_background_blur_manager background_blur_manager
 * @section page_iface_background_blur_manager_desc Description
 *
 * This interface allows a compositor to announce support for blurring the backgrounds of surfaces.
 *
 * Starting from version 2, clients are permitted to define the blurred region using SVG paths.
 * @section page_iface_background_blur_manager_api API
 * See @ref iface_background_blur_manager.
 */
/**
 * @defgroup iface_background_blur_manager The background_blur_manager interface
 *
 * This interface allows a compositor to announce support for blurring the backgrounds of surfaces.
 *
 * Starting from version 2, clients are permitted to define the blurred region using SVG paths.
 */
extern const struct wl_interface background_blur_manager_interface;
#endif
#ifndef BACKGROUND_BLUR_INTERFACE
#define BACKGROUND_BLUR_INTERFACE
/**
 * @page page_iface_background_blur background_blur
 * @section page_iface_background_blur_desc Description
 *
 * Blur effect that is applied to the background of a surface.
 * @section page_iface_background_blur_api API
 * See @ref iface_background_blur.
 */
/**
 * @defgroup iface_background_blur The background_blur interface
 *
 * Blur effect that is applied to the background of a surface.
 */
extern const struct wl_interface background_blur_interface;
#endif

#ifndef BACKGROUND_BLUR_MANAGER_ERROR_ENUM
#define BACKGROUND_BLUR_MANAGER_ERROR_ENUM
enum background_blur_manager_error {
	/**
	 * the surface already has an associated background blur
	 */
	BACKGROUND_BLUR_MANAGER_ERROR_ALREADY_CONSTRUCTED = 0,
};
#endif /* BACKGROUND_BLUR_MANAGER_ERROR_ENUM */

#define BACKGROUND_BLUR_MANAGER_DESTROY 0
#define BACKGROUND_BLUR_MANAGER_GET_BACKGROUND_BLUR 1


/**
 * @ingroup iface_background_blur_manager
 */
#define BACKGROUND_BLUR_MANAGER_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_background_blur_manager
 */
#define BACKGROUND_BLUR_MANAGER_GET_BACKGROUND_BLUR_SINCE_VERSION 1

/** @ingroup iface_background_blur_manager */
static inline void
background_blur_manager_set_user_data(struct background_blur_manager *background_blur_manager, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) background_blur_manager, user_data);
}

/** @ingroup iface_background_blur_manager */
static inline void *
background_blur_manager_get_user_data(struct background_blur_manager *background_blur_manager)
{
	return wl_proxy_get_user_data((struct wl_proxy *) background_blur_manager);
}

static inline uint32_t
background_blur_manager_get_version(struct background_blur_manager *background_blur_manager)
{
	return wl_proxy_get_version((struct wl_proxy *) background_blur_manager);
}

/**
 * @ingroup iface_background_blur_manager
 *
 * Destroy the background blur manager. This doesn't destroy objects created with the manager.
 */
static inline void
background_blur_manager_destroy(struct background_blur_manager *background_blur_manager)
{
	wl_proxy_marshal_flags((struct wl_proxy *) background_blur_manager,
			 BACKGROUND_BLUR_MANAGER_DESTROY, NULL, wl_proxy_get_version((struct wl_proxy *) background_blur_manager), WL_MARSHAL_FLAG_DESTROY);
}

/**
 * @ingroup iface_background_blur_manager
 *
 * Creates a new background blur object for a given surface.
 *
 * The surface must not already have an associated background blur, otherwise the already_constructed error is emitted.
 *
 * Immediately after the object is created, the compositor will send a state event, a style event, and finally a configure event.
 *
 * Surfaces must acknowledge the configure event and may then define the blur region or path before the next commit.
 *
 * The client may ignore all configure events except for the last one.
 *
 * A client can send multiple ack_configure requests before committing, but only the last request sent prior to the commit indicates which configure event the client is responding to.
 */
static inline struct background_blur *
background_blur_manager_get_background_blur(struct background_blur_manager *background_blur_manager, struct wl_surface *surface)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_flags((struct wl_proxy *) background_blur_manager,
			 BACKGROUND_BLUR_MANAGER_GET_BACKGROUND_BLUR, &background_blur_interface, wl_proxy_get_version((struct wl_proxy *) background_blur_manager), 0, NULL, surface);

	return (struct background_blur *) id;
}

#ifndef BACKGROUND_BLUR_ERROR_ENUM
#define BACKGROUND_BLUR_ERROR_ENUM
enum background_blur_error {
	/**
	 * surface destroyed before object
	 */
	BACKGROUND_BLUR_ERROR_DESTROYED_SURFACE = 0,
	/**
	 * invalid ack serial
	 */
	BACKGROUND_BLUR_ERROR_INVALID_SERIAL = 1,
	/**
	 * invalid svg path
	 * @since 2
	 */
	BACKGROUND_BLUR_ERROR_INVALID_PATH = 2,
};
/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_ERROR_INVALID_PATH_SINCE_VERSION 2
#endif /* BACKGROUND_BLUR_ERROR_ENUM */

#ifndef BACKGROUND_BLUR_STATE_ENUM
#define BACKGROUND_BLUR_STATE_ENUM
enum background_blur_state {
	/**
	 * the blur effect is disabled
	 */
	BACKGROUND_BLUR_STATE_DISABLED = 0,
	/**
	 * the blur effect is enabled
	 */
	BACKGROUND_BLUR_STATE_ENABLED = 1,
};
#endif /* BACKGROUND_BLUR_STATE_ENUM */

#ifndef BACKGROUND_BLUR_STYLE_ENUM
#define BACKGROUND_BLUR_STYLE_ENUM
enum background_blur_style {
	/**
	 * the blur effect has a dark tone
	 */
	BACKGROUND_BLUR_STYLE_DARK = 0,
	/**
	 * the blur effect has a light tone
	 */
	BACKGROUND_BLUR_STYLE_LIGHT = 1,
};
#endif /* BACKGROUND_BLUR_STYLE_ENUM */

/**
 * @ingroup iface_background_blur
 * @struct background_blur_listener
 */
struct background_blur_listener {
	/**
	 * Indicates whether the blur effect is enabled
	 *
	 * Specifies whether the blur effect is being applied by the
	 * compositor. If the effect is disabled, the surface should no
	 * longer make the blurred region transparent.
	 *
	 * The change must be followed by a configure event to take effect.
	 *
	 * The initial state is disabled.
	 * @param state The state of the blur effect.
	 */
	void (*state)(void *data,
		      struct background_blur *background_blur,
		      uint32_t state);
	/**
	 * Indicates the color tone of the blur effect.
	 *
	 * The style specifies the color tone of the blur effect. Clients
	 * can adapt their content accordingly, for example, displaying
	 * white text if the tone is dark or black text if the tone is
	 * light.
	 *
	 * The change must be followed by a configure event to take effect.
	 *
	 * The initial value is light.
	 * @param style The color tone of the blur effect.
	 */
	void (*style)(void *data,
		      struct background_blur *background_blur,
		      uint32_t style);
	/**
	 * notifies a blur effect change
	 *
	 * The configure event marks the end of a configure sequence.
	 *
	 * If the client receives multiple configure events before it can
	 * respond to one, it is free to discard all but the last event it
	 * received.
	 * @param serial serial of the configure event
	 */
	void (*configure)(void *data,
			  struct background_blur *background_blur,
			  uint32_t serial);
};

/**
 * @ingroup iface_background_blur
 */
static inline int
background_blur_add_listener(struct background_blur *background_blur,
			     const struct background_blur_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) background_blur,
				     (void (**)(void)) listener, data);
}

#define BACKGROUND_BLUR_DESTROY 0
#define BACKGROUND_BLUR_SET_REGION 1
#define BACKGROUND_BLUR_ACK_CONFIGURE 2
#define BACKGROUND_BLUR_SET_PATH 3

/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_STATE_SINCE_VERSION 1
/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_STYLE_SINCE_VERSION 1
/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_CONFIGURE_SINCE_VERSION 1

/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_SET_REGION_SINCE_VERSION 1
/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_ACK_CONFIGURE_SINCE_VERSION 1
/**
 * @ingroup iface_background_blur
 */
#define BACKGROUND_BLUR_SET_PATH_SINCE_VERSION 2

/** @ingroup iface_background_blur */
static inline void
background_blur_set_user_data(struct background_blur *background_blur, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) background_blur, user_data);
}

/** @ingroup iface_background_blur */
static inline void *
background_blur_get_user_data(struct background_blur *background_blur)
{
	return wl_proxy_get_user_data((struct wl_proxy *) background_blur);
}

static inline uint32_t
background_blur_get_version(struct background_blur *background_blur)
{
	return wl_proxy_get_version((struct wl_proxy *) background_blur);
}

/**
 * @ingroup iface_background_blur
 *
 * Switch back to a mode without background blur at the next commit.
 */
static inline void
background_blur_destroy(struct background_blur *background_blur)
{
	wl_proxy_marshal_flags((struct wl_proxy *) background_blur,
			 BACKGROUND_BLUR_DESTROY, NULL, wl_proxy_get_version((struct wl_proxy *) background_blur), WL_MARSHAL_FLAG_DESTROY);
}

/**
 * @ingroup iface_background_blur
 *
 * Sets the blurred region.
 *
 * This is a double-buffered operation, refer to wl_surface.commit. 
 * The region is defined in local surface coordinates and may not extend beyond the surface bounds. 
 * The compositor may apply additional clipping at its discretion. 
 * The client should avoid both rendering opaque content within the blurred region and marking the blurred region as opaque.
 *
 * Setting the pending blur region has copy semantics, allowing the wl_region object to be destroyed immediately. 
 * Setting a null region disables the blur effect.
 *
 * For the compositor to display the blur effect, it must be configured as enabled, and the client must commit a non-null region or path.
 *
 * The initial value is null.
 */
static inline void
background_blur_set_region(struct background_blur *background_blur, struct wl_region *blur_region)
{
	wl_proxy_marshal_flags((struct wl_proxy *) background_blur,
			 BACKGROUND_BLUR_SET_REGION, NULL, wl_proxy_get_version((struct wl_proxy *) background_blur), 0, blur_region);
}

/**
 * @ingroup iface_background_blur
 *
 * Acknowledging a serial that has not been sent, or one that has already been acknowledged, triggers the invalid_serial error.
 */
static inline void
background_blur_ack_configure(struct background_blur *background_blur, uint32_t serial)
{
	wl_proxy_marshal_flags((struct wl_proxy *) background_blur,
			 BACKGROUND_BLUR_ACK_CONFIGURE, NULL, wl_proxy_get_version((struct wl_proxy *) background_blur), 0, serial);
}

/**
 * @ingroup iface_background_blur
 *
 * Sets the blurred region using an SVG path.
 *
 * The string of commands must describe a valid SVG path, as specified here:
 *
 * https://svgwg.org/specs/paths/
 *
 * This operation has identical semantics to set_region. 
 * The SVG path coordinates must be defined in local surface coordinates. 
 * Using either set_path or set_region invalidates the other.
 *
 * Setting a non null invalid path triggers the invalid_path error.
 */
static inline void
background_blur_set_path(struct background_blur *background_blur, const char *commands)
{
	wl_proxy_marshal_flags((struct wl_proxy *) background_blur,
			 BACKGROUND_BLUR_SET_PATH, NULL, wl_proxy_get_version((struct wl_proxy *) background_blur), 0, commands);
}

#ifdef  __cplusplus
}
#endif

#endif
