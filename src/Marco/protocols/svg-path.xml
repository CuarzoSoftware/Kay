<?xml version="1.0" encoding="UTF-8"?>
<protocol name="svg-path">
  <copyright>
    Copyright Â© 2025 Cuarzo Software

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <interface name="svg-path-manager" version="1">
    <description summary="SVG path manager">
      This interface allows a compositor to announce support for SVG vector paths.

      A client can use this protocol to specify regions using shapes that are more complex than simple boxes.

      Warning! The protocol described in this file is experimental and
      backward incompatible changes may be made. Backward compatible changes
      may be added together with the corresponding interface version bump.
      Backward incompatible changes are done by bumping the version number in
      the protocol and interface names and resetting the interface version.
      Once the protocol is to be declared stable, the 'z' prefix and the
      version number in the protocol and interface names are removed and the
      interface version number is reset.
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the SVG path manager object">
        Destroy the SVG path manager. This doesn't destroy objects created
        with the manager.
      </description>
    </request>

    <request name="get_path">
      <description summary="create a new SVG path object">
        Create a new SVG path object.

        A newly created path is considered complete after valid commands are specified and then committed.
      </description>
      <arg name="id" type="new_id" interface="svg_path"/>
    </request>
  </interface>

  <interface name="svg_path" version="1">
    <description summary="SVG path object">
      Represents an SVG vector path. 
    </description>

    <enum name="error">
      <entry name="missing_commands" value="0"
        summary="committing without specifying any commands beforehand"/>
      <entry name="invalid_commands" value="1"
        summary="invalid SVG path commands"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the vector path object">
        Destroy the SVG path object.
      </description>
    </request>


    <request name="set_commands">
      <description summary="set the SVG vector path commands">

        SVG path commands: https://svgwg.org/specs/paths/

        The coordinate system is unspecified and depends on the context in which the path is used.

        Commands are part of a double-buffered state, see commit.

        Providing invalid commands results in the invalid_commands error.
      </description>
      <arg name="commands" summary="the SVG path commands"/>
    </request>

    <request name="commit">
      <description summary="apply pending changes">
        Committing without specifying any commands beforehand raises the missing_commands error.
      </description>
    </request>

  </interface>
</protocol>
